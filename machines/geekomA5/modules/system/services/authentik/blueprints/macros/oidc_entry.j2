{% import "macros/utils.j2" as utils with context %}
{% import "global_utils.j2" as global_utils with context %}

{% macro oidc_entry(name, slug, group, client_id_env, client_secret_env, redirect_uris, icon, is_admin_only=false, access_token_validity="days=30", refresh_token_validity="days=180") -%}
  {% if client_id_env is not defined %}
{% set client_id = name | upper + "_OAUTH_CLIENT_ID" %}
  {% else %}
{% set client_id = client_id_env %}
  {% endif %}
  {% if client_secret_env is not defined %}
{% set client_secret = name | upper + "_OAUTH_CLIENT_SECRET" %}
  {% else %}
{% set client_secret = client_secret_env %}
  {% endif %}
# yaml-language-server: $schema=https://version-2024-8.goauthentik.io/blueprints/schema.json
version: 1
metadata:
  name: {{ slug }}
  labels:
    blueprints.goauthentik.io/description: "Setup {{ name }} OAuth Provider & Application"
entries:
  - model: authentik_providers_oauth2.oauth2provider
    id: provider
    state: present
    identifiers:
      name: {{ name }}
    attrs:
      authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
      authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
      property_mappings:
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, openid]]
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, email]]
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, profile]]
      client_type: confidential
      access_token_validity: {{ access_token_validity }}
      refresh_token_validity: {{ refresh_token_validity }}
      signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]
      client_id: !Env {{ client_id }}
      client_secret: !Env {{ client_secret }}
      redirect_uris: |
        {{ redirect_uris | indent(8, False) }}

  - model: authentik_core.application
    state: present
    id: application
    identifiers:
      name: {{ name }}
      slug: {{ slug }}
    attrs:
      provider: !KeyOf provider
      open_in_new_tab: true
  {% if icon is defined %}
      icon: {{ icon }}
  {% else %}
      icon: {{ global_utils.generate_icon(slug) }}
  {% endif %}
  {% if group is defined %}
      group: {{ group }}
  {% endif %}

  {% if is_admin_only -%}
  {{ utils.generate_admin_policy() | indent(2, True) }}
  {% endif %}

{% endmacro %}
